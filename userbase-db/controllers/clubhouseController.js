import express, { json } from 'express';
const app = express();
import { body, validationResult } from 'express-validator';
import { gameCardSchema, genreSchema } from '../constants/gameFormSchema.js';
import { addRowToTable, addToTable, deleteFromTable, selectFromTable } from '../db/queries.js';
import pool from '../db/pool.js';
import { tableMap } from '../db/tableMap.js';
import { updateInTable } from '../db/queries.js';
import { commentFormSchema } from '../constants/commentFormSchema.js';
import { prisma } from '../db/primaClient.js';
import { logJSONStringify } from '../js/utils.js';

/* –ê–õ–ì–û–†–ò–¢–ú –û–¢–†–ò–°–û–í–ö–ò –ü–û–õ–ï–ô –ê–í–¢–û–† –∏ CREATED_AT –≤ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –°–¢–ê–¢–£–°–ê –Æ–ó–ï–†–ê

1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
2. –ï—Å–ª–∏ –¥–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –±–¥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è isMember = true
3. –î–∞–ª–µ–µ –º–Ω–µ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Å–≤–æ–π—Å—Ç–≤—É –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∞ –∏ created at? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫ —Ç—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å? –ò–ª–∏ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π —ç—Ç–∏—Ö –ø–æ–ª–µ–π –∏ –∏—Å–∫–∞—Ç—å —Ç–∞–º —Ñ–ª–∞–≥ isMember?
4. –û—Ç—Ä–∏—Å–æ–≤–∞–µ–º –ø–æ–ª—è –≤ —à–∞–±–ª–æ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–µ–º–±–µ—Ä–∞:

if (key === 'author' || key === 'created_at') {
    if (user.isMember) {
    <%= commentFormSchema[key].label %>: <%- comment[key] %> 
    } else { return }
} else {
    }
*/

app.use(express.urlencoded({ extended: true }));

//RENDER COMMENTS LIST
export const renderCommentsGet = async (req, res) => {
    const start = Date.now();
    try {
        // const comments = (
        //     await pool.query(`
        //     SELECT users.username, comments.comment_id, comments.content, comments.created_at
        //     FROM users JOIN comments 
        //     ON users.id = comments.author_id`)
        // ).rows;
        // // console.log('üöÄ ~ comments:', comments);
        const t1 = Date.now();
        const commentsRaw = await prisma.comment.findMany({
            select: { 
                id: true, 
                content: true, 
                createdAt: true, 
                user: {
                    select: {
                        username: true
                    }
                } 
            },
        });
        // console.log('üöÄ ~ comments:', commentsRaw);
        const t2 = Date.now();
        const commentsFormatted = commentsRaw.map(comment => {
            
            const formattedComment = {
                ...comment,
                author: comment.user.username
            };
            delete formattedComment.user;
            return formattedComment;
        })
        // console.log("üöÄ ~ commentsFormatted:", commentsFormatted);
        const t3 = Date.now();
        // console.log('‚è± –î–æ —Ä–µ–Ω–¥–µ—Ä–∞:', Date.now() - start, 'ms')


        res.render('comments-list', {
            comments: commentsFormatted,
            commentFormSchema,
            // user: req.user //TODO: –ø–æ—á–µ–º—É –±–µ–∑ —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ user req user –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è Username?
        });
        // console.log('‚è± Prisma:', t2 - t1, 'ms');
        // console.log('‚è± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', t3 - t2, 'ms');
        // console.log('‚è± –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞:', Date.now() - start, 'ms');
    } catch (error) {
        warn(error);
    }
};

//ADD COMMENT
export const addCommentGet = (req, res) => {
    res.render('add-comment');
};

export const addCommentPost = async (req, res, next) => {
    try {
        // console.log('–í–Ω—É—Ç—Ä–∏ addCommentPost, –±–ª–æ–∫ addCommentPost')
        const errors = validationResult(req);

        // console.log("üöÄ ~ addCommentPost ~ errors.mapped():", errors.mapped());

        // console.log("üöÄ req.body:", req.body);
        // console.log("üöÄ user:", req.user);

        if (!errors.isEmpty()) {
            console.log('–µ—Å—Ç—å –æ—à–∏–±–∫–∞!');

            return res.render('add-comment', {
                endpoint: `/add-comment`,
                errorsMap: errors.mapped(),
            });
        }

        //–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É
        const addedComment = await addToTable({
            table: 'comments',
            columns: 'author_id, content',
            rowData: [req.user.id, req.body.content],
        });

        // console.log("üöÄ ~ addCommentPost ~ addedComment:", addedComment);

        res.redirect('/clubhouse');
    } catch (error) {
        console.warn(error);
        return next(error);
    }
};

//VERIFY MEMBERSHIP
export const verifyMembershipGet = async (req, res) => {};

export const verifyMembershipPost = async (req, res) => {};

//DELETE COMMENT
export const deleteCommentGet = async (req, res) => {
    console.log(req.params);
    console.log('üöÄ ~ req.params:', req.params.comment_id);

    const [deletedComment] = await deleteFromTable({
        table: 'comments',
        where: {
            comment_id: { op: '=', value: req.params.comment_id },
        },
        returning: '*',
    });

    console.log('üöÄ ~ deletedComment:', deletedComment);

    console.log(`üöÄ –£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: id: ${deletedComment.comment_id}, –∫–æ–Ω—Ç–µ–Ω—Ç: ${deletedComment.content}`);

    res.redirect('/clubhouse');
};
