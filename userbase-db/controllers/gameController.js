import express from "express";
const app = express();
import { body, validationResult } from "express-validator";
import { gameCardSchema, genreSchema } from "../constants/gameFormSchema.js";
import { selectRows, insertUser, addItem } from "../db/queries.js";
import pool from "../db/pool.js";
import { tableMap } from "../db/tableMap.js";


app.use(express.urlencoded({ extended: true }));

//ADD GAME

//GET
export const addGameGet = (req, res) => {
    res.render("add-game", {
        heading: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã",
        formData: {
            heading: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã',
            endpoint: `add-game`,
            formSchema: gameCardSchema
        },
    });
};
/* 
1. –í —Å—Ö–µ–º–µ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ isMultiple
2. –í —à–∞–±–ª–æ–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥ isMultiple - –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å –∏–Ω–ø—É—Ç–∞–º–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞ –≤–∑—è—Ç—ã –∏–∑ —Å—Ö–µ–º—ã
3. –í req.body –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª—è
*/
//POST
export async function addGamePost(req, res) {

    try {
        const errors = validationResult(req);
        const formInputData = req.body;
        console.log("üöÄ ~ formInputData:", formInputData)
        
        if (!errors.isEmpty()) {
            return res.render('add-game', {
                heading: '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
                formData: {
                    endpoint: `add-game`,
                    errorsMap: errors.mapped(),  
                    game,
                    formSchema: gameCardSchema,
                    genreSchema,
                }
            })
        }
    
        /*
        –î–∞–Ω–Ω—ã–µ –∏–∑ formInputData –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:
        1. –¢–∞–±–ª–∏—Ü–∞ games - –ø–æ–ª—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏–∑ tableMap. –†–∞—Å–ø–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç formInputData, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–µ games:
        */
        
        const gamesTableData = {};
    
        tableMap.games.forEach(({columnName, type}) => {
            if (columnName in formInputData) {
                const value = formInputData[columnName];
                gamesTableData[columnName] = normalizeByColumnType(value, type);
            } else {
                warn(`–ö–æ–ª–æ–Ω–∫–∞ ${columnName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ formInputData`)
            }
        });
    
        // console.log("üöÄ ~ addGamePost ~ gamesTableData:", gamesTableData);
        // console.log(`\nüöÄ ~ gamesTableData:\n${JSON.stringify(gamesTableData, null, 2)}\n`);
        const gamesTableColumns = Object.keys(gamesTableData).join(', ');
        // console.log("üöÄ ~ addGamePost ~ gamesTableColumns:", gamesTableColumns)
        await addItem('games', gamesTableColumns, gamesTableData);
        
    
        /*
        2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–Ω—Ä–∞—Ö –∏–≥—Ä—ã –≤ —Å–≤—è–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É games_genres. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ :
        - –ø–æ–ª—É—á–∏—Ç—å ID –∏–≥—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã games (–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ) - —ç—Ç–æ –±—É–¥–µ—Ç game_id –≤ —Ç–∞–±–ª–∏—Ü–µ games_genres
        - –ø–æ–ª—É—á–∏—Ç—å ID –∂–∞–Ω—Ä–æ–≤ (–ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ formInputData.genres) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã genre - —ç—Ç–æ –±—É–¥—É—Ç genres_id –≤ —Ç–∞–±–ª–∏—Ü–µ games_genres
        - –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –∂–∞–Ω—Ä–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—É games_genres —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ ID –∏–≥—Ä—ã –∏ –∂–∞–Ω—Ä–æ–≤
        */
        res.redirect('/games');
    } catch (error) {
        warn(error);
    }
}

/* 
1.–î–æ–±–∞–≤–∏—Ç—å –∂–∞–Ω—Ä—ã –∫ –∏–≥—Ä–µ
a) SELECT id FROM genres
WHERE name IN ('$1', '$2')
AND id LIKE ('$3', '$4')
ORDER BY id ASC

('$1', '$2') <=> values = ['rpg', 'rts']
pool.query(query, values)




SELECT id, name from $table
WHERE name =/LIKE/> $1
('$1') <=> value = ['rpg']

*/

//EDIT USER

//GET
// export const editUserGet = async (req, res) => {

//     const userId = Number(req.params.id);

//     if (isNaN(userId)) {
//         log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
//         res.status(404).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
//         return;
//     }
//     const queryResponse = await pool.query(`
//         SELECT * FROM usernames
//         WHERE id = $1
//         `, [userId]);
    
//     const user = queryResponse.rows[0];

//     if (!user) {
//         console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!");
//         res.status(404).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
//         return;
//     }

//     res.render("edit-user", {
//         heading: `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstname}`,
//         formInputData: {
//             endpoint: `/${user.id}/edit`,
//             user, 
//             formSchema: gameCardSchema
//         },
//     });
// };

// //POST
// export const editUserPost = async (req, res) => {
    
//     const errors = validationResult(req);
//     const user = req.body;
//     const userId = Number(req.params.id);

//     if (!errors.isEmpty()) {
//         return res.render('edit-user', {
//             heading: '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
//             formInputData: {
//                 endpoint: `/${req.params.id}/edit`,
//                 errorsMap: errors.mapped(),  
//                 user, 
//                 formSchema: gameCardSchema
//             }
//         })
//     }
//     /* UPDATE table_name
//         SET column1 = value1, column2 = value2
//         WHERE condition; */ 
    
//     const updateParams = Object.entries(req.body).filter(([key, value]) => value.trim() !== '');;

//     let updateQuery = `UPDATE usernames SET`;
//     const columns = [];
//     const values = [];

//     updateParams.forEach(([param, value], i) => {
//         columns.push(`${param} = $${i + 1}`);
//         values.push(value);
//     });

//     updateQuery += ` ` + columns.join(', ') + ` WHERE id = ${userId}`;

//     await pool.query(updateQuery, values);
//     log(await selectRows('usernames'));
//     log('hello');
    
//     res.redirect("/");
// };


// //DELETE USER

// //GET
// export const deleteUserGet = async (req, res) => {
//     const userId = Number(req.params.id);    
//     const deleteQuery = `DELETE FROM usernames
//         WHERE id = $1;`
//     await pool.query(deleteQuery, [userId]);
//     res.redirect('/');
// }

/* UTILS */
function normalizeByColumnType(value, type) {
    if (type === "numeric" || type === "int") {
        if (value === "") return null;
        //–µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –≤ numeric –∫–æ–ª–æ–Ω–∫—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º null
        const num = Number(value);
        //–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        return isNaN(num) ? null : num;
    }
    return value;
}