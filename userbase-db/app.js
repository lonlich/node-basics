import {
    log,
    warn,
    table,
    block,
    fakeApiCall,
    now,
    //formatPrice,
} from "./js/utils.js";

import "./js/globals.js";

import {
    __filename,
    __dirname,
    PORT,
    STATIC_FOLDER_PATH,
    PAGE404_FILE,
} from "./config.js";

import express from "express";
import expressLayouts from "express-ejs-layouts";
import { body, validationResult } from "express-validator";
import axios, { Axios } from "axios";
import pool from "./db/pool.js";
import dotenv from "dotenv";
dotenv.config();

//auth
import session from "express-session";
import connectPgSimple from "connect-pg-simple";
const PgSession = connectPgSimple(session);
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import bcrypt from "bcryptjs";



import { setupLocals } from "./middleware/setupLocals.js";
import { validateUser } from "./validators/validateUser.js";
import { validateUpdatedUser } from "./validators/validateUpdatedUser.js";

//controllers
import {
    createUserGet,
    createUserPost,
    editUserGet,
    editUserPost,
    deleteUserGet,
} from "./controllers/userController.js";
import { searchControllerGet } from "./controllers/searchController.js";

import { userbase } from "./storage/userbase.js";
import { userFormSchema } from "./constants/userFormSchema.js";

import fs from "fs";
import { access } from "fs/promises";
import { constants } from "fs";
import { readFile } from "fs/promises";
import http from "node:http";
import url from "node:url";
import path from "path";
import EventEmitter from "node:events";
const eventEmitter = new EventEmitter();
import { upperCase } from "upper-case";
import formidable from "formidable";

import { dirname } from "path";
import { fileURLToPath } from "url";

//routers
import { indexRouter } from "./routers/index-router.js";
import { indexGet } from "./controllers/indexController.js";
import { gamesRouter } from "./routers/games-router.js";
import { addToTable, selectFromTable, updateInTable } from "./db/queries.js";
import { gameCardSchema } from "./constants/gameFormSchema.js";
import { clubhouseRouter } from "./routers/clubhouse-router.js";
import { signUpGet, signUpPost } from "./controllers/signUpController.js";
import { loadCurrentUser } from "./db/dbUtils.js";

const app = express();

//use EJS as template engine
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

//use express-ejs-layouts
app.use(expressLayouts);
app.set("layout", "layout");

//body parsing
app.use(express.json());
app.set("json spaces", 2);
app.use(express.urlencoded({ extended: true }));

//set up res.locals
app.use(setupLocals);

//serve static files
app.use(express.static(path.join(__dirname, "public")));


//session
app.use(
    session({
        store: new PgSession({
            pool: pool, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à pool
            tableName: 'sessions', // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "session")
            createTableIfMissing: false, // –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        }),
        secret: process.env.SESSION_SECRET, // –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å process.env
        resave: false, // –ù–µ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å
        saveUninitialized: false, // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        cookie: {
            maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
            secure: false, // true, –µ—Å–ª–∏ HTTPS
        },
    })
);
app.use(passport.initialize());
app.use(passport.session());





/* MAIN */

//USERBASE

app.get("/", loadCurrentUser, indexGet);

//create user
app.get("/create-user", createUserGet);
app.post("/create-user", validateUser, createUserPost);

//edit user
app.get("/:id/edit", editUserGet);
app.post("/:id/edit", validateUpdatedUser, editUserPost);

//delete user
app.get("/:id/delete", deleteUserGet);

//search user
app.get("/search", searchControllerGet);

//GAMEBASE

app.use("/games", gamesRouter);

//SIGN UP
app.get('/signup', signUpGet);
app.post('/signup', signUpPost);

//LOGIN

//–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è 
passport.use(
    new LocalStrategy(async (username, password, done) => {
        try {
            // log('–≤ localstrategy')
            //–∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ username –∏ password –≤ –±–¥
            const { rows } = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
            const user = rows[0];

            console.log("üöÄ ~ newLocalStrategy ~ user:", user);
            
            //–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!user) {
                return done(null, false, { message: 'Incorrect username' });
            }

            const match = await bcrypt.compare(password, user.password);
            
            if (!match) {
                // passwords do not match!
                return done(null, false, { message: 'Incorrect password' });
            }
            //–µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–π–¥–µ–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –æ–±—ä–µ–∫—Ç user, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –±–¥, –≤ serializeUser
            // log('–ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —é–∑–µ—Ä –Ω–∞–π–¥–µ–Ω')
            return done(null, user);
        } catch (err) {
            return done(err);
        }
    })
);

//–±–µ—Ä–µ–º –∏–∑ user —Ç–æ–ª—å–∫–æ id, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Å–µ—Å—Å–∏—é –≤–µ—Å—å –æ–±—ä–µ–∫—Ç (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–∞–º - —Ö–µ—à –ø–∞—Ä–æ–ª—è, –∏–º–µ–π–ª –∏—Ç–¥. –¢–∞–∫–∂–µ –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º -> —Ä–∞—Å—Ö–æ–¥—É–µ—Ç –ø–∞–º—è—Ç—å —Å–µ—Ä–≤–µ—Ä–∞). –ó–∞—Ç–µ–º —ç—Ç–æ—Ç id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Å—Å–∏—é: req.session.passport = { user: user.id }
/*
serializeUser –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ ‚Üí –∫–ª–∞–¥—ë—Ç user.id (–∏–ª–∏ –¥—Ä—É–≥–æ–µ) –≤ —Å–µ—Å—Å–∏—é.
*/
passport.serializeUser((user, done) => {
    console.log("üöÄ ~ passport.serializeUser ~ user:", user);

    done(null, user.id);
});



/*user.id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ Session store –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –¢–∞–º –∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è Session ID: 
Session store:
    {
        id: "abc123",
        passport: { user: 42 }
    }
*/

/*–í –æ—Ç–≤–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫—É–∫–∞ —Å Session ID:  Set-Cookie: connect.sid=abc123. –û–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ—è –∫—É–∫–∞ - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
*/

//deserializeUser –≤–∏–¥–∏—Ç –≤ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π user.id –∏ –∫–ª–∞–¥–µ—Ç –µ–≥–æ –≤ req.user.id. –ó–∞—Ç–µ–º –ø–æ —ç—Ç–æ–º—É id –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
/*
deserializeUser –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ö–ê–ñ–î–û–ú –Ω–æ–≤–æ–º HTTP-–∑–∞–ø—Ä–æ—Å–µ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
*/
passport.deserializeUser(async (id, done) => {
    
    // try {

        //–ø–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ —Å–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        // const { rows } = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
        // const user = rows[0];

        // console.log("üöÄ ~ passport.deserializeUser ~ user:", user);

        //–ø–µ—Ä–µ–¥–∞–µ—Ç user –≤ req.user, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–ª—å—à–µ –≤ –∑–∞–ø—Ä–æ—Å–µ
        done(null, { id });
    // } catch (err) {
    //     done(err);
    // }
});

app.post('/login', passport.authenticate('local', {
    successRedirect: '/',
    failureRedirect: '/'
})
);

//LOGOUT
app.get('/logout', (req, res, next) => {
    //passport –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é logout –≤ req object
    req.logout((err) => {
        if (err) {
            return next(err);
        }
        res.redirect('/');
    });
});


//CLUBHOUSE

app.use("/clubhouse", clubhouseRouter);

app.get('/givemember', loadCurrentUser, async (req, res) => {

    // const user = await getCurrentUser(req);

    console.log("üöÄ ~ app.get ~ user:", req.user);
    log(typeof req.user.id)

    await updateInTable({
        table: 'users', 
        set: { is_member: true },
        where: {
            id: { op: '=', value: req.user.id}
        }
    })
    // await pool.query(`UPDATE users SET is_member = true WHERE id = $1`, [userId]);
    res.redirect('/');
})



//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack); // –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

    res.status(500).render("error", {
        error: err,
    });
});

//–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    log(`Server running on port ${PORT}!`);
});

//TODO: –¥–æ–±–∞–≤–∏—Ç—å CONFIRM PASSWORD

//TODO: —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω –ø–æ—Å–ª–µ signup

//TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ REST-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

//TODO: –¥–æ–±–∞–≤–∏—Ç—å sanitizing –¥–ª—è –ø–æ–ª–µ–π –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

//TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å ID —Å —Ü–∏—Ñ—Ä –Ω–∞ –≥–æ–≤–æ—Ä—è—â–∏–µ. –•–æ—Ç—è –±—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤?



