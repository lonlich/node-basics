import {
    log,
    warn,
    table,
    block,
    fakeApiCall,
    now,
    //formatPrice,
} from "./js/utils.js";

import "./js/globals.js";

import {
    __filename,
    __dirname,
    PORT,
    STATIC_FOLDER_PATH,
    PAGE404_FILE,
} from "./config.js";

import express from "express";
import expressLayouts from "express-ejs-layouts";
import { body, validationResult } from "express-validator";
import axios, { Axios } from "axios";
import pool from "./db/pool.js";
import dotenv from "dotenv";
dotenv.config({ quiet: true });

//Prisma
// import { PrismaClient } from './generated/prisma/index.js';
// const prisma = new PrismaClient();




//auth
import session from "express-session";
import connectPgSimple from "connect-pg-simple";
const PgSession = connectPgSimple(session);
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import bcrypt from "bcryptjs";



import { setupLocals } from "./middleware/setupLocals.js";
import { validateUser } from "./validators/validateUser.js";
import { validateUpdatedUser } from "./validators/validateUpdatedUser.js";

//controllers
import {
    createUserGet,
    createUserPost,
    editUserGet,
    editUserPost,
    deleteUserGet,
} from "./controllers/userController.js";
import { searchControllerGet } from "./controllers/searchController.js";

import { userbase } from "./storage/userbase.js";
import { userFormSchema } from "./constants/userFormSchema.js";

import fs from "fs";
import { access } from "fs/promises";
import { constants } from "fs";
import { readFile } from "fs/promises";
import http from "node:http";
import url from "node:url";
import path from "path";
import EventEmitter from "node:events";
const eventEmitter = new EventEmitter();
import { upperCase } from "upper-case";
import formidable from "formidable";

import { dirname } from "path";
import { fileURLToPath } from "url";

//routers
import { indexRouter } from "./routers/index-router.js";
import { indexGet } from "./controllers/indexController.js";
import { gamesRouter } from "./routers/games-router.js";
import { addToTable, selectFromTable, updateInTable } from "./db/queries.js";
import { gameCardSchema } from "./constants/gameFormSchema.js";
import { clubhouseRouter } from "./routers/clubhouse-router.js";
import { signUpGet, signUpPost } from "./controllers/signUpController.js";
import { loadCurrentUser } from "./db/dbUtils.js";
import { usersRouter } from "./routers/users-router.js";
import { configurePassport } from "./auth/configurePassport.js";
import { validateSignUp } from "./validators/validateSignUp.js";
import { validateLogin } from "./validators/validateLogin.js";
import { loginGet, loginPost } from "./controllers/loginController.js";
import { prismaQueriesTest } from "./js/prismaQueries.js";

const app = express();

//use EJS as template engine
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

//use express-ejs-layouts
app.use(expressLayouts);
app.set("layout", "layout");

//body parsing
app.use(express.json());
app.set("json spaces", 2);
app.use(express.urlencoded({ extended: true }));

//serve static files
app.use(express.static(path.join(__dirname, "public")));

console.log('SESSION_SECRET:', process.env.SESSION_SECRET);

//session
app.use(
    session({
        store: new PgSession({
            pool: pool, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à pool
            tableName: 'sessions', // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "session")
            createTableIfMissing: false, // –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        }),
        secret: process.env.SESSION_SECRET, // –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å process.env
        resave: false, // –ù–µ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å
        saveUninitialized: false, // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        cookie: {
            maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
            secure: false, // true, –µ—Å–ª–∏ HTTPS
        },
    })
);

//PASSPORT

configurePassport(passport);

app.use(passport.initialize());
app.use(passport.session());

//set up res.locals
app.use(setupLocals);

/* MAIN */

//SIGN UP
app.get('/signup', signUpGet);
app.post('/signup', validateSignUp, signUpPost);

//LOG IN

app.get('/login', loginGet);

app.post('/login', validateLogin, loginPost, passport.authenticate('local', {
    successRedirect: '/clubhouse',
    failureRedirect: '/login-failed'
})
);

app.get('/login-failed', (req, res) => {
    res.render('login-failed');
});

//LOGOUT
app.get('/logout', (req, res, next) => {
    //passport –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é logout –≤ req object
    req.logout((err) => {
        if (err) {
            return next(err);
        }
        res.redirect('/clubhouse');
    });
});

//USERBASE
app.use('/', usersRouter);

//GAMEBASE
app.use("/games", gamesRouter);

//CLUBHOUSE
app.use("/clubhouse", clubhouseRouter);

app.get('/givemember', loadCurrentUser, async (req, res) => {

    // const user = await getCurrentUser(req);

    console.log("üöÄ ~ app.get ~ user:", req.user);
    log(typeof req.user.id)

    await updateInTable({
        table: 'users', 
        set: { is_member: true },
        where: {
            id: { op: '=', value: req.user.id}
        }
    })
    // await pool.query(`UPDATE users SET is_member = true WHERE id = $1`, [userId]);
    res.redirect('/');
})


//Prisma Queries Test
prismaQueriesTest();

//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack); // –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

    res.status(500).render("error", {
        error: err,
    });
});


//–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    log(`Server running on port ${PORT}!`);
});



/*
TODO: 
- —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π –∏–∑ —Å—Ö–µ–º—ã –∏ –∑–∞–º–µ–Ω–∏—Ç—å –≤–µ–∑–¥–µ. –î–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ partials. –ü–æ–¥—É–º–∞—Ç—å, —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –ª–∏ —ç—Ç–æ –¥–µ–ª–∞—Ç—å?
- –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã
- –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞?
*/



//TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π Incorrect Login, INcorrect password (–∏–∑ Localstrategy –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç –≥–¥–µ –µ—Å—Ç—å message). –ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º–∏ message

//TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ REST-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

//TODO: –¥–æ–±–∞–≤–∏—Ç—å sanitizing –¥–ª—è –ø–æ–ª–µ–π –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

//TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å ID —Å —Ü–∏—Ñ—Ä –Ω–∞ –≥–æ–≤–æ—Ä—è—â–∏–µ. –•–æ—Ç—è –±—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤?



