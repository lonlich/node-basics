export const genreSchema = {
    rpg: { label: "RPG" },
    rts: { label: "RTS" },
    action: { label: "Action" },
};

//–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –ø–æ–ª—è –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã. –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –≤—Å–µ –ø–æ–ª—è –∏–∑ –±–∞–∑—ã, –∞ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ
export const gameCardSchema = {
    id: { label: "ID –∏–≥—Ä—ã", type: "text", visibleInForm: false },
    name: { label: "–ù–∞–∑–≤–∞–Ω–∏–µ", type: "text" },
    description: { label: "–û–ø–∏—Å–∞–Ω–∏–µ", type: "text" },
    price: { label: "–¶–µ–Ω–∞", type: "number" },
    created_at: { label: "–î–æ–±–∞–≤–ª–µ–Ω–æ", type: "text", visibleInForm: false },
    genre: { label: "–ñ–∞–Ω—Ä", type: "checkbox", isMultiple: true, options: genreSchema },
};

<%  
    const {
        endpoint = '',
        errorsMap = {},
        formInputData = {},
        formSchema = {},
    } = formData || {};
%>
<form action="/games/<%= endpoint %>" method="post">
    <% Object.keys(formSchema).forEach((field) => { 
        if (field === 'genre') {
        log('field: ',field); 
        log('field.options: ', formSchema[field].options) }
                        
        if (formSchema[field].visibleInForm === false) return; 
        
        if (formSchema[field].isMultiple) { %>
            <legend><%= formSchema[field].label %>:</legend>
            <% 
                if (formSchema[field].options) {
                    for (const option in formSchema[field].options) { %>
                    <fieldset>
                        <label><input 
                            type="<%= formSchema[field].type %>" 
                            name="<%= field %>" 
                            value="<%= option %>"
                            <% 
                            formInputData[field].forEach(v => {
                                if (v in field?.options) { %>
                                checked
                            <% }
                            }) 
                            %>
                            >
                            <%= formSchema[field].options[option].label %></label>
                    </fieldset>
                <% }
                }
        } %>
        
        
        <label for="<%= field %>"><%= formSchema[field].label %></label>
        </br>
        <input 
            value="<%= formInputData[field] %>" 
            type="<%= formSchema[field].type %>" 
            id="<%= field %>" 
            name="<%= field %>" 
        />
    </br>
        <% if (errorsMap[field]?.path === field) { 
            console.log('–ï—Å—Ç—å –æ—à–∏–±–∫–∞!');%>
            <p><%= errorsMap[field].msg %></p>
        <% } %>
        <% }); %>
            <button type="submit">Submit</button>
</form>

üìã Logger:
 field:  genre
=====================
üìã Logger:
 field.options:  {
  rpg: { label: 'RPG' },
  rts: { label: 'RTS' },
  action: { label: 'Action' }
}

–ü–æ—á–µ–º—É —è –ø–æ–ª—É—á–∞—é –æ—à–∏–±–∫—É, –≤–µ–¥—å —è –¥–µ–ª–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ formSchema[label].options —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?

TypeError: C:\Users\Admin\Dropbox\repos\node-basics\userbase-db\views\edit-game.ejs:3
    1| <h1><%= heading %></h1>
    2| 
 >> 3| <%- include('partials/game-form') %>

C:\Users\Admin\Dropbox\repos\node-basics\userbase-db\views\partials\game-form.ejs:27
    25|                             name="<%= field %>" 
    26|                             value="<%= option %>"
 >> 27|                             <% 
    28|                             formInputData[field].forEach(v => {
    29|                                 if (v in field?.options) { %>
    30|                                 checked

Cannot use 'in' operator to search for 'rts' in undefined
    at eval ("C:\\Users\\Admin\\Dropbox\\repos\\node-basics\\userbase-db\\views\\partials\\game-form.ejs":55:39)
    at Array.forEach (<anonymous>)
    at eval ("C:\\Users\\Admin\\Dropbox\\repos\\node-basics\\userbase-db\\views\\partials\\game-form.ejs":54:50)
    at Array.forEach (<anonymous>)
    at eval ("C:\\Users\\Admin\\Dropbox\\repos\\node-basics\\userbase-db\\views\\partials\\game-form.ejs":24:32)
    at game-form (C:\Users\Admin\Dropbox\repos\node-basics\node_modules\ejs\lib\ejs.js:703:17)
    at include (C:\Users\Admin\Dropbox\repos\node-basics\node_modules\ejs\lib\ejs.js:701:39)
    at eval ("C:\\Users\\Admin\\Dropbox\\repos\\node-basics\\userbase-db\\views\\edit-game.ejs":14:17)
    at edit-game (C:\Users\Admin\Dropbox\repos\node-basics\node_modules\ejs\lib\ejs.js:703:17)
    at tryHandleCache (C:\Users\Admin\Dropbox\repos\node-basics\node_modules\ejs\lib\ejs.js:274:36)
	
===

<% 
                            formInputData[field].forEach(val => {
                                log('val', val);
                                log('formSchema[field].options', formSchema[field].options)
                                if (val in formSchema[field].options) { %>
                                checked
                            <% }
                            }) 
                            %>
							
–ì–¥–µ —Ç–æ –≤ —ç—Ç–æ–º –∫–æ–¥–µ –æ—à–∏–±–∫–∞. –î–∞–∂–µ –µ—Å–ª–∏ formInputData[field] —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è, checked –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤  formSchema[field].options. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã checked –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ formInputData[field]?

===

–í—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –ø–æ—á–µ–º—É, —Ä–∞–∑–≤–µ val in formSchema[field].options –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å false –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ formInputData[field] —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ rts, rpg, –Ω–æ –Ω–µ action. –í–µ–¥—å action –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ if, —Ä–∞–∑–≤–µ –Ω–µ—Ç?
==

–ü–æ—á–µ–º—É –≤ formInputData.genre –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ genreNames?

let formInputData = {};
    formInputData = gamesRow;
    formInputData.genre = genreNames;
	
	 ~ editGameGet ~ gamesRow: [  
  {
    id: 1,
    name: 'warcraft',
    description: null,
    price: '60.00',
    created_at: '12:43:24.25+00'
  }
]
üöÄ ~ editGameGet ~ games_genresRows: [ { game_id: 1, genre_id: 2 }, { game_id: 1, genre_id: 3 } ]
üöÄ ~ editGameGet ~ genreRows: [ { id: 2, name: 'rts' }, { id: 3, name: 'rpg' } ]
üöÄ ~ editGameGet ~ genreNames: [ 'rts', 'rpg' ]
üöÄ ~ editGameGet ~ formInputData: [
  {
    id: 1,
    name: 'warcraft',
    description: null,
    price: '60.00',
    created_at: '12:43:24.25+00'
  },
  genre: []
  
 ====
 
 –í–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É:
 
 <form action="/games/<%= endpoint %>" method="post">
    <% Object.keys(formSchema).forEach((field) => { 
        if (field === 'genre') {
        log('field: ',field); 
        log('field.options: ', formSchema[field].options) }
                        
        if (formSchema[field].visibleInForm === false) return; 
        
        if (formSchema[field].isMultiple) { %>
            <legend><%= formSchema[field].label %>:</legend>
            <% 
                if (formSchema[field].options) {
                    for (const option in formSchema[field].options) { %>
                    <fieldset>
                        <label><input 
                            type="<%= formSchema[field].type %>" 
                            name="<%= field %>" 
                            value="<%= option %>"
                            <% 
                                if (formInputData[field]?.includes(option)) {
                            %>
                                checked
                            <% } %>
                            >
                            <%= formSchema[field].options[option].label %></label>
                    </fieldset>
                <% }
                }
        } %>
        
        
        <label for="<%= field %>"><%= formSchema[field].label %></label>
        </br>
        <input 
            value="<%= formInputData[field] %>" 
            type="<%= formSchema[field].type %>" 
            id="<%= field %>" 
            name="<%= field %>" 
        />
    </br>
        <% if (errorsMap[field]?.path === field) { 
            console.log('–ï—Å—Ç—å –æ—à–∏–±–∫–∞!');%>
            <p><%= errorsMap[field].msg %></p>
        <% } %>
        <% }); %>
            <button type="submit">Submit</button>
</form>

1. –ù–µ –ª—É—á—à–µ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å guard-clause, —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏? –í–æ—Ç —Ç–∞–∫:

if (!formSchema[field].options) return; 
                    for (const option in formSchema[field].options) { %>
                    <fieldset>
                        <label><input 
                            type="<%= formSchema[field].type %>" 
                            name="<%= field %>" 
                            value="<%= option %>"
                            <% 
                                if (formInputData[field]?.includes(option)) {
                            %>
                                checked
                            <% } %>
                            >
                            <%= formSchema[field].options[option].label %></label>
                    </fieldset>
                <% }

2. –£ –º–µ–Ω—è –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã multiple field. –°–µ–π—á–∞—Å —ç—Ç–æ checkbox, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø—É—Å—Ç–∏–º radio-button. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –Ω–∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞? –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤–µ—Ç–∫—É?

if (!formSchema[field].options) return; 
if (formSchema[field].type === 'checkbox') {
for (const option in formSchema[field].options) { %>
<fieldset>
    <label><input 
        type="<%= formSchema[field].type %>" 
        name="<%= field %>" 
        value="<%= option %>"
        <% 
            if (formInputData[field]?.includes(option)) {
        %>
            checked
        <% } %>
        >
        <%= formSchema[field].options[option].label %></label>
</fieldset>
<% }}

if (formSchema[field].type === 'radiobutton') {
    –ª–æ–≥–∏–∫–∞ –¥–ª—è radiobutton
}

===

–Ø –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è post-–∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–≥—Ä—ã:

export const editGamePost = async (req, res) => {
    
    const errors = validationResult(req);
    //—Å–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const formInputData = req.body;

    if (!errors.isEmpty()) {
            return res.render('edit-game', {
                heading: '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö',
                formData: {
                    endpoint: `edit-game`,
                    errorsMap: errors.mapped(),  
                    formInputData,
                    formSchema: gameCardSchema,
                }
            })
    }

    
    const gameId = Number(req.params.id);

    //–ø–æ –∞–π–¥–∏ –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ

    //—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç 

    //—Å–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è updateInTable

–í–æ–ø—Ä–æ—Å –ø—Ä–æ –ø—É–Ω–∫—Ç: //—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç 

–ü–æ–∫–∞ —è –ø—Ä–∏–¥—É–º–∞–ª —Å–∞–º–æ–µ –æ—á–µ–≤–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: 

–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã games:
1. —Å–¥–µ–ª–∞—Ç—å –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞: currentGameData –∏ newGameData.
2. –í currentGameData –∑–∞–ø–∏—Å—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î –ø–æ id —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∏–≥—Ä—ã
3. –í newGameData –∑–∞–ø–∏—Å—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ req.body
4. —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç updatedGameData –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É (–æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–∏—Ö)
5. –ó–∞—Ç–µ–º –¥–µ–ª–∞—é —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: 

for (const field in updatedGameData) {
    newGameData[field] !== currentGameData[field] ? updatedGameData[field] = newGameData[field]
}

–î–∞–ª–µ–µ –¥–µ–ª–∞—é –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø—É –¥–ª—è –∂–∞–Ω—Ä–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü—ã games_genres

–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥? –ú–Ω–µ –æ–Ω –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º "—Ä—É—á–Ω—ã–º" –∏ –≥—Ä–æ–º–æ–∑–¥–∫–∏–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤. –ö–∞–∫ –±—É–¥—Ç–æ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–± –ø—Ä–æ—â–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π. –ú–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–ª–∏—à–Ω—è –∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—å –∏ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π? 